//+------------------------------------------------------------------+
//|                                               TwoCandleSystem.mq5|
//|                                 Copyright 2023, MetaQuotes Ltd.  |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.01"

input ulong  MagicNumber = 12345;   // Magic Number
input double LotSize     = 0.1;     // Lot Size
input int    TakeProfit  = 400;     // Take Profit in points
input double NegativePnLThreshold = -100.0; // Close position if PnL <= -100 USD

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Check for minimum number of bars
   if(Bars(_Symbol, PERIOD_D1) < 3)
     {
      Print("Not enough historical data");
      return;
     }

   // Check if already traded today
   string globalVarName = "LastTradeDate_" + string(MagicNumber) + "_" + Symbol();
   datetime lastTradeDate = GlobalVariableGet(globalVarName);
   datetime currentDate = TimeCurrent() / 86400 * 86400; // Get midnight of current day
   
   if(lastTradeDate >= currentDate)
     {
      Print("Already traded today. Skipping new trades.");
     }
   else
     {
      // Get candle data
      double firstCandleOpen = iOpen(_Symbol, PERIOD_D1, 1);
      double firstCandleClose = iClose(_Symbol, PERIOD_D1, 1);
      double firstCandleHigh = iHigh(_Symbol, PERIOD_D1, 1);
      double firstCandleLow = iLow(_Symbol, PERIOD_D1, 1);

      double secondCandleOpen = iOpen(_Symbol, PERIOD_D1, 2);
      double secondCandleClose = iClose(_Symbol, PERIOD_D1, 2);

      // Check candle conditions
      bool isSecondCandleBearish = secondCandleClose < secondCandleOpen;
      bool isFirstCandleBullish = firstCandleClose > firstCandleOpen;
      bool isFirstCloseGreaterThanSecondClose = firstCandleClose > secondCandleClose;

      // Get current price
      double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);

      // Check buy condition
      if(isSecondCandleBearish && isFirstCandleBullish && isFirstCloseGreaterThanSecondClose && ask > firstCandleHigh && !HasOpenPosition())
        {
         double sl = firstCandleLow;
         double tp = ask + TakeProfit * _Point; // Fixed TP of 400 points
         if(OpenTrade(ORDER_TYPE_BUY, ask, sl, tp))
            GlobalVariableSet(globalVarName, currentDate);
        }
     }

   // Check for open positions and close if PnL <= NegativePnLThreshold
   CheckAndCloseNegativePnL();
  }

//+------------------------------------------------------------------+
//| Check if there's any open position                               |
//+------------------------------------------------------------------+
bool HasOpenPosition()
  {
   for(int i = PositionsTotal() - 1; i >= 0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetString(POSITION_SYMBOL) == _Symbol && 
            PositionGetInteger(POSITION_MAGIC) == MagicNumber)
           {
            return true;
           }
        }
     }
   return false;
  }

//+------------------------------------------------------------------+
//| Execute trade order                                              |
//+------------------------------------------------------------------+
bool OpenTrade(const ENUM_ORDER_TYPE orderType, const double price, const double sl, const double tp)
  {
   MqlTradeRequest request = {};
   MqlTradeResult result = {};

   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = LotSize;
   request.type = orderType;
   request.price = price;
   request.deviation = 5;
   request.magic = MagicNumber;

   // Set stop loss and take profit
   request.sl = NormalizeDouble(sl, _Digits);
   request.tp = NormalizeDouble(tp, _Digits);

   // Send trade request
   if(!OrderSend(request, result))
     {
      Print("OrderSend failed: ", GetLastError());
      return false;
     }
   return true;
  }

//+------------------------------------------------------------------+
//| Check and close positions with negative PnL                     |
//+------------------------------------------------------------------+
void CheckAndCloseNegativePnL()
  {
   for(int i = PositionsTotal() - 1; i >= 0; i--)
     {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetString(POSITION_SYMBOL) == _Symbol && 
            PositionGetInteger(POSITION_MAGIC) == MagicNumber)
           {
            double pnl = PositionGetDouble(POSITION_PROFIT);
            if(pnl <= NegativePnLThreshold)
              {
               ClosePosition(ticket);
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Close a position by ticket                                       |
//+------------------------------------------------------------------+
void ClosePosition(const ulong ticket)
  {
   MqlTradeRequest request = {};
   MqlTradeResult result = {};

   request.action = TRADE_ACTION_DEAL;
   request.position = ticket;
   request.symbol = PositionGetString(POSITION_SYMBOL);
   request.volume = PositionGetDouble(POSITION_VOLUME);
   request.type = (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) ? ORDER_TYPE_SELL : ORDER_TYPE_BUY;
   request.price = (request.type == ORDER_TYPE_SELL) ? SymbolInfoDouble(request.symbol, SYMBOL_BID) : SymbolInfoDouble(request.symbol, SYMBOL_ASK);
   request.deviation = 5;
   request.magic = MagicNumber;

   // Send close request
   if(!OrderSend(request, result))
     {
      Print("Failed to close position: ", GetLastError());
     }
  }
//+------------------------------------------------------------------+
